{"version":3,"sources":["data.js","header.js","pageLoad.js","about.js","contact.js","menu.js","content.js","footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","headerItems","Data","map","header","id","key","toString","onClick","props","handleClick","className","React","Component","PageLoad","AboutUs","Contact","type","Menu","sides","drinks","entreeItems","entree","sideItems","side","drinkItems","drink","Content","this","content","Footer","footerItems","footer","App","handleTabs","bind","state","clickedTab","setState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a50cdbee.chunk.js","sourcesContent":["let headers = ['About', 'Menu', 'Contact'];\nlet footers = ['Facebook', 'Instagram', 'Twitter'];\nlet entrees = ['Hamburger', 'Cheeseburger', 'Wings', 'Hotdog'];\nlet sides = ['Fries', 'Chips', 'Tots'];\nlet drinks = ['Beer', 'Wine', 'Whiskey']\n\nexport default{headers, footers, entrees, sides, drinks}","import React from 'react';\nimport Data from './data'\n\n\nclass Header extends React.Component{\n\n  render (){\n    const headers = Data.headers\n    const headerItems = headers.map((header) =>\n        <li id={header} key={header.toString()} onClick = {() => this.props.handleClick(header)}>\n            {header}\n        </li>\n    );\n    return (\n        <nav className=\"navBarContainer\">\n            <div className = \"navBarLeft\">\n                <h1 id=\"restaurantNameNavBar\" onClick = {() => this.props.handleClick()}>\n                    Scott's Pub\n                </h1>\n            </div>\n            <div className = \"navBarRight\">\n                <ul className = \"navBar\">\n                    {headerItems}\n                </ul>\n            </div>\n        </nav>\n       \n        \n    )\n  }\n\n}\n\n\nexport default Header","import React from 'react';\n\n\nclass PageLoad extends React.Component {\n\n    render () {\n        return (\n            <div >\n                <h1 id=\"restaurantNamePageLoad\">Scott's Pub</h1>\n            </div>\n    \n        )\n    }\n\n}\nexport default PageLoad","import React from 'react';\n\nfunction AboutUs () {\n    return (\n        <div className=\"aboutUs\">\n            <h1>About Us</h1>\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Senectus et netus et malesuada fames ac. \n            Vulputate enim nulla aliquet porttitor lacus luctus accumsan. Ut tristique et egestas quis ipsum suspendisse ultrices gravida dictum. Suspendisse ultrices gravida dictum fusce. \n            Ridiculus mus mauris vitae ultricies leo integer malesuada nunc. Id aliquet risus feugiat in ante. Diam vel quam elementum pulvinar etiam non quam. \n            Enim nunc faucibus a pellentesque sit amet porttitor eget. \n            Leo vel fringilla est ullamcorper eget nulla facilisi. Eget felis eget nunc lobortis.\n            </p>\n        </div>\n\n    )\n}\nexport default AboutUs","import React from 'react';\n\nexport default class Contact extends React.Component {\n\n    render () {\n        return (\n            <div className=\"formDiv\">\n                <form className=\"contactForm\">\n                    <h1 id=\"contactHeader\">Contact Us!</h1>\n                    <label id=\"nameLabel\">Name :</label>\n                    <input id=\"nameInput\" type=\"text\"></input>\n                    <label id=\"emailLabel\">Email :</label>\n                    <input id=\"emailInput\" type=\"email\"></input>\n                    <label id=\"textLabel\">What Would You Like to Say?</label>\n                    <textarea id=\"textInput\" type=\"text\"></textarea>\n                    <button id=\"submitButton\">Submit</button>\n                </form>\n            </div>\n            \n        )\n    }\n       \n}","import React from 'react';\nimport Data from './data'\n\nexport default class Menu extends React.Component {\n\n    render () {\n        const entrees = Data.entrees;\n        const sides = Data.sides;\n        const drinks = Data.drinks;\n\n        const entreeItems = entrees.map((entree) =>\n            <li id={entree} key={entree.toString()}>\n                {entree}\n            </li>\n        );\n        const sideItems = sides.map((side) =>\n            <li id={side} key={side.toString()}>\n                {side}\n            </li>\n        );\n        const drinkItems = drinks.map((drink) =>\n            <li id={drink} key={drink.toString()}>\n                {drink}\n            </li>\n        );\n        return (\n            <div className=\"menu\">\n               <div className=\"entreeItems\">\n                    <h1 id=\"entreeHeader\">Entre√©s</h1>\n                    <ul className=\"entreeList\">\n                        {entreeItems}\n                    </ul>\n               </div>\n               <div className=\"sideItems\">\n                    <h1 id=\"sideHeader\">Sides</h1>\n                    <ul className=\"sideList\">\n                        {sideItems}\n                    </ul>\n               </div>\n               <div className=\"drinkItems\">\n                    <h1 id=\"drinkHeader\">Drinks</h1>\n                    <ul className=\"drinkList\">\n                        {drinkItems}\n                    </ul>\n               </div>\n            </div>\n            \n        )\n    }\n       \n}","import React from 'react';\n\nclass Content extends React.Component {\n\n    render () {\n        return (\n            <div id='content'>\n                {this.props.content}\n            </div>\n            \n        )\n    }\n       \n}\n\nexport default Content","import React from 'react';\nimport Data from './data'\n\n\nfunction Footer () {\n    const footers = Data.footers\n    const footerItems = footers.map((footer) =>\n        <li id={footer} key={footer.toString()}>\n            {footer}\n        </li>\n        \n  );\n \n    return (\n        <div className=\"footerContainer\">\n            <ul className=\"logos\">\n                {footerItems}\n            </ul>\n        </div>\n\n    )\n}\n\nexport default Footer","import React from 'react';\nimport Header from './header';\nimport PageLoad from './pageLoad'\nimport AboutUs from './about'\nimport Contact from './contact'\nimport Menu from './menu'\nimport Content from './content';\nimport Footer from './footer';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleTabs = this.handleTabs.bind(this)\n    this.state = {\n        content: <PageLoad />\n    };\n}\n\n  handleTabs(clickedTab) { // if the tab is clicked it will render that specific tab\n    if (clickedTab === 'About'){\n      this.setState({ content: <AboutUs /> })\n    }else if (clickedTab === 'Menu'){\n      this.setState({ content: <Menu /> })\n    }else if (clickedTab === 'Contact'){\n      this.setState({ content: <Contact /> })\n    }else{\n      this.setState({ content: <PageLoad /> })\n    }\n  }\n\n  render () {\n    return (\n      <div>\n        <Header handleClick = {this.handleTabs}/>\n        <Content content={this.state.content}/>\n        <Footer />\n      </div>\n      \n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n <App />\n  \n  ,\n  document.getElementById('root')\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}